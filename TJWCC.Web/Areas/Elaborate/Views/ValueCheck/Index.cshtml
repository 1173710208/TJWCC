
@{
    ViewBag.Title = "阀门状态核准";
    Layout = "~/Views/Shared/_Index.cshtml";
}
@* arcgis  *@
<link rel="stylesheet" type="text/css" href="@TJWCC.Code.OperatorProvider.Provider.GetCurrent().ArcGISAPI/dijit/themes/tundra/tundra.css" />
<link rel="stylesheet" type="text/css" href="@TJWCC.Code.OperatorProvider.Provider.GetCurrent().ArcGISAPI/esri/css/esri.css" />
<script src="@TJWCC.Code.OperatorProvider.Provider.GetCurrent().ArcGISAPI/init.js"></script>
@*<link href="~/Areas/DataDisplay/Content/css/bootstrap.css" rel="stylesheet" />*@
<link href="~/Areas/DataDisplay/Content/css/ValveStatusApproval.css" rel="stylesheet" />
<link href="~/Areas/DataDisplay/Content/css/unite.css" rel="stylesheet" />
<link href="~/Areas/DataDisplay/Content/css/map/indexMap.css" rel="stylesheet" />
<link href="~/Areas/DataDisplay/Content/css/bootstrap.css" rel="stylesheet" />
<script src="~/Areas/DataDisplay/Content/js/map/map2.js"></script>
<script src="~/Content/js/HashTable.js"></script>
<script type="text/javascript">
    var ArcGISServer = "@TJWCC.Code.OperatorProvider.Provider.GetCurrent().ArcGISServer";
    var ArcGISAPI = "@TJWCC.Code.OperatorProvider.Provider.GetCurrent().ArcGISAPI/";
    var PressUnitConv = 100;//水压单位换算
    var PressUnit = "MPa";//水压单位
    var PressPlace = 3;//水压小数位
    var mPressUnit = "mH₂O";//模拟水压单位
    var mPressPlace = 2;//模拟水压小数位
    var ClUnit = "mg/L";//余氯单位
    var BgaUnit = "个/ml";//蓝绿藻单位
    var TurbUnit = "NTU";//浊度单位
    var FlowUnit = "m³/h";//流量单位
    var FlowVUnit = "m/s";//流速单位
    var PLengthUnit = "m";//管长单位
    var PDiameterUnit = "mm";//管径单位
    var JDepthUnit = "m";//埋深单位
    var JElevationUnit = "m";//高程单位
    var JAge = "小时";//水龄单位
</script>
<style>
    .map_stss {
        right: 20px;
        bottom: 83px;
        height: 32px;
        width: 32px;
        border: 1px solid rgb(0,0,0);
        border-radius: 7px;
        z-index: 10;
        /*border-left: 0;*/
        position: absolute;
        text-align: center;
        line-height: 34px;
        font-size: 14px;
        float: left;
        color: black;
        background-color: white;
    }

        .map_stss:hover {
            cursor: pointer;
            background-color: rgb(224,236,255);
        }

    .Z-left-system-operate {
        padding: 5px;
        padding-left: 15px;
        /*background-color: aliceblue;*/
        color: black;
        float: left;
        width: 100%;
        margin-right:30px
    }

        .Z-left-system-operate:hover {
            cursor: pointer;
            background-color: rgb(149,184,231);
        }

    .active {
        color: #ffffff;
        background-color: #df7319;
    }

    .right1121 {
        height: 28px !important;
        width: 120px;
        background-color: #216fed;
        color: #fff;
        border: 0;
        border-radius: 10px;
        margin-left: 5px;
        margin-right: 10px
    }

    #ORGANIZEID > option {
        background-color: #fff;
        color: #000;
    }
</style>
<div class="main-container">
    <div class="middle">
        <div id="map" class="middle2" style="display:block;position: relative;">
            <div class="map_stss" id="fullExtent" onclick="fullExtentClick()">全图</div>
            <button id="valveBut" class="font10 middle11" style="z-index:10;position:absolute;" onclick="mapQueryClick(this)">选择阀门</button>
            <button id="areaBut" class="font10 middle11" style="z-index:10;position:absolute;left:142px" onclick="measutreArea(this)">划定排查区域</button>
            <button class="font10 middle11 xiaoId" style="z-index:10;position:absolute;left:264px" onclick="markeCompany(this)">营销公司</button>
            <div id="ORGANIZEID" style="z-index:10;position:absolute;left:270px;top:40px;display:none">
                <table id="companyTable" class="right21_title" style="width:100px">
                </table>
            </div>
            <div id="companyDatas" style="z-index:10;position:absolute;left:380px;top:40px;background-color:#fff;width:260px;height:400px;display:none"></div>
        </div>
    </div>
    <div id="followMouseInfo" class="followMouseInfo" style="display:none">单击地图选择阀门</div>@*浮动显示信息*@
    <div class="right">
        <div class="right1" style="display:inline">待核准的阀门</div>
        <a class="btn btn-primary" onclick="clearFm(this)" style="display:inline"> <span class="glyphicon glyphicon-refresh"> </span> </a>
        <button class="right511" id="scfaBut" style="margin-left:165px; margin-bottom:10px;width:75px;display:inline" onclick="modelCompute(this)">阀门核准</button>
        <div class="right2">
            <div class="right21">
                <table class="right21_title">
                    <tr class="right211">
                        <th class="right2111">
                            <input type="checkbox"   id="cbAll"/>
                         </th>
                        <th class="right2111">序号</th>
                        <th class="right2112">地址</th>
                        <th class="right2112">状态</th>
                        <th class="right2112">口径（mm）</th>
                    </tr>
                </table>
            </div>
            <div class="right22">
                <table id="valveList" class="right22_data">
                </table>
            </div>
        </div>
        <div class="right1">待排查阀门</div>
        <div class="right2">
            <div class="right21">
                <table class="right21_title">
                    <tr class="right211">
                        <th class="right2111"></th>
                        <th class="right2112">地址</th>
                        <th class="right2112">口径（mm）</th>
                        <th class="right2112">状态</th>
                        <th class="right2112">核准结果</th>
                    </tr>
                </table>
            </div>
            <div class="right22">
                <table id="valveListCheck" class="right22_data">
                </table>
            </div>
        </div>
        <button class="right3" style="margin-top:10px;display:none" onclick="issueInstruction(this)">下发排查任务指令</button>
    </div>
</div>
<script type="text/javascript">
    var isFirstRun = true;
    var FullExtent, isMapQuery = false, index = 1, CLToolbartb, isCLToolbartbA = false;
    var tiled2, layerModelBaseMapMin, identifyParams, vList, geometryService, BigPolygonSymbol;
    var zoneClass = new HashTable();
    var districtClass = new HashTable();
    var DMAClass = new HashTable();
    var DMAAreaClass = new HashTable();
    var ORGANIZEID = $("#ORGANIZEID")
    var flage = false
    var all = document.querySelector('#cbAll');
    var sports = document.getElementsByName("upCheck");
    require([
        "esri/basemaps",
        "esri/map",
        "esri/Color",
        "esri/toolbars/draw",
        "esri/dijit/Scalebar",
        "esri/dijit/HomeButton",
        "esri/dijit/OverviewMap",
        "esri/layers/GraphicsLayer",
        "esri/layers/ArcGISTiledMapServiceLayer",
        "esri/layers/ArcGISDynamicMapServiceLayer",
        "esri/tasks/GeometryService",
        "esri/tasks/query",
        "esri/tasks/QueryTask",
        "esri/tasks/IdentifyTask",
        "esri/tasks/IdentifyParameters",
        "esri/tasks/AreasAndLengthsParameters",
        "esri/tasks/LengthsParameters",
        "esri/symbols/Font",
        "esri/symbols/TextSymbol",
        "esri/symbols/SimpleLineSymbol",
        "esri/symbols/SimpleFillSymbol",
        "esri/symbols/PictureMarkerSymbol",
        "dojo/query",
        "esri/graphic",
        "esri/InfoTemplate",
        "dojo/_base/array",
        "dojo/parser",
        "dojo/domReady!"
    ], function (
        esriBasemaps,
        Map,
        Color,
        Draw,
        Scalebar,
        HomeButton,
        OverviewMap,
        GraphicsLayer,
        ArcGISTiledMapServiceLayer,
        ArcGISDynamicMapServiceLayer,
        GeometryService,
        Query,
        QueryTask,
        IdentifyTask,
        IdentifyParameters,
        AreasAndLengthsParameters,
        LengthsParameters,
        Font,
        TextSymbol,
        SimpleLineSymbol,
        SimpleFillSymbol,
        PictureMarkerSymbol,
        dojoQuery,
        Graphic,
        InfoTemplate,
        arrayUtils,
        parser) {
        //font1
        font1 = new Font("13px", Font.STYLE_NORMAL, Font.VARIANT_NORMAL, Font.WEIGHT_BOLDER);
        color1 = new Color([240, 138, 6]);
        color2 = new Color([51, 192, 94]);
        color3 = new Color([0, 105, 244]);
        parser.parse();
        var initExtent = new esri.geometry.Extent({ "xmin": 99192.63530892128, "ymin": 298825.92644339317, "xmax": 100742.03840772746, "ymax": 300589.11330310017, "spatialReference": map.spatialReference });
        esriBasemaps.delorme = {
            baseMapLayers: [
                //中国矢量地图服务
                {
                    url: ArcGISServer + "BaseMap/MapServer",
                    id: "底图",
                    opacity: 0.5
                }
            ],
            //缩略图
            thumbnailUrl: "Imgs/shiliang.jpg",
            title: "矢量图"
        };
        //初始化地图
        map = new Map("map", {
            basemap: "delorme",
            logo: false,
            extent: initExtent,
            fadeOnZoom: true,
            showLabels: true,
            isDoubleClickZoom: false//关闭双击放大
        });
        //禁用键盘缩放平移
        map.disableKeyboardNavigation();
        //卫星底图
        //var toggle = new BasemapToggle({
        //    map: map,
        //    basemap: "satellite"
        //}, "BasemapToggle");
        //toggle.startup();
        //返回主视图
        var home = new HomeButton({
            map: map
        }, "HomeButton");
        home.startup();
        //定位
        //geoLocate = new LocateButton({
        //    map: map
        //}, "LocateButton");
        //geoLocate.startup();
        //鹰眼
        var overviewMapDijit = new OverviewMap({
            map: map,
            expandFactor: 100,
            attachTo: "bottom-left",
            visible: false
        });
        overviewMapDijit.startup();
        //比例尺
        var scalebar = new Scalebar({ map: map, attachTo: "bottom-left", scalebarUnit: "metric" });
        //显示坐标点
        //dojo.connect(map, "onLoad", function () {
        //    dojo.connect(map, "onMouseMove", showCoordinates);
        //    //dojo.connect(map, "onMouseDrag", showCoordinates);
        //    initCLToolbar();//初始化测量工具
        //});
        //基础元素搜索图层
        baseMapServerLayer = ArcGISServer + "ModelBaseMap/MapServer";
        //水泵搜索图层
        pumpMapLayer = ArcGISServer + "ModelBaseMap/MapServer/0";
        //水池搜索图层
        reservoirMapLayer = ArcGISServer + "ModelBaseMap/MapServer/1";
        //消火栓搜索图层
        hydrantMapLayer = ArcGISServer + "ModelBaseMap/MapServer/2";
        //阀门搜索图层
        valveMapLayer = ArcGISServer + "ModelBaseMap/MapServer/3";
        //节点搜索图层
        nodeMapLayer = ArcGISServer + "ModelBaseMap/MapServer/4";
        //管道搜索图层
        pipeMapLayer = ArcGISServer + "ModelBaseMap/MapServer/5";
        //水表搜索图层
        waterMeterMapLayer = ArcGISServer + "CheckMeterService/MapServer/0";
        //管道模拟数据搜索图层
        resultPipeMapLayer = ArcGISServer + "Result_Pipe_D/MapServer/0";
        //源水管网节点搜索图层
        sourceNodeMapLayer = ArcGISServer + "SourceWater_D/MapServer/2";

        //1.定义面的边界线符号
        outline = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([255, 0, 0]), 3);
        //2.定义面符号
        //BigPolygonSymbol = new SimpleMarkerSymbol().setSize(12).setColor(new dojo.Color([0, 0, 255]));
        //RedBigPolygonSymbol = new SimpleMarkerSymbol().setSize(12).setColor(new dojo.Color([255, 0, 0]));
        //YellowBigPolygonSymbol = new SimpleMarkerSymbol().setSize(12).setColor(new dojo.Color([239, 242, 132]));
        //SmallPolygonSymbol = new SimpleMarkerSymbol().setSize(8).setColor(new dojo.Color([0, 0, 255]));
        BigPolygonSymbol = new PictureMarkerSymbol('/Content/myImage/valve.png', 16, 16);
        RedBigPolygonSymbol = new PictureMarkerSymbol('/Content/myImage/valves.png', 30, 34).setOffset(0, 17);
        ReBigPolygonSymbol = new PictureMarkerSymbol('Content/myImage/gif/阀.gif', 30, 34).setOffset(0, 17);
        RedGlowPolygonSymbol = new PictureMarkerSymbol('Content/myImage/gif/Red_glow.gif', 45, 45);
        WhiteBigPolygonSymbol = new PictureMarkerSymbol('Content/myImage/gif/Purple_glow.gif', 45, 45);
        YellowBigPolygonSymbol = new PictureMarkerSymbol('Content/myImage/traffic-cone.png', 34, 36).setOffset(0, 5);
        SmallPolygonSymbol = new PictureMarkerSymbol('/Areas/DataDisplay/Content/img/junction.png', 16, 16);
        SmallPressSymbol = new PictureMarkerSymbol('/Areas/DataDisplay/Content/img/press.png', 16, 16).setOffset(0, 8);
        SmallFlowSymbol = new PictureMarkerSymbol('/Areas/DataDisplay/Content/img/flow.png', 16, 16).setOffset(0, 8);
        SmallQualitySymbol = new PictureMarkerSymbol('/Areas/DataDisplay/Content/img/quality.png', 16, 16).setOffset(0, 8);
        WhiteSmallPolygonSymbol = new PictureMarkerSymbol('Content/myImage/gif/Blue_glow.gif', 45, 45);
        ReserviorPolygonSymbol = new PictureMarkerSymbol('Content/myImage/reservior.png', 32, 32);
        PumpPolygonSymbol = new PictureMarkerSymbol('Content/myImage/pump.png', 32, 32);
        HydrantPolygonSymbol = new PictureMarkerSymbol('Content/myImage/hydrant.png', 32, 32);
        pictureMarkerSymbol = new PictureMarkerSymbol('Content/myImage/gif/pipeBreak.gif', 35, 35).setOffset(0, 12);//爆管冒水动画图片
        BlackinfoPictureMSymbol = new PictureMarkerSymbol("Content/myImage/blackinfowin.png", 150, 48).setOffset(0, 24);
        BluePinPictureMSymbol = new PictureMarkerSymbol("Content/myImage/BluePin1LargeB.png", 64, 64).setOffset(0, 32);
        GreenPinPictureMSymbol = new PictureMarkerSymbol("Content/myImage/GreenPin1LargeB.png", 64, 64).setOffset(0, 32);
        BlueCPictureMSymbol = new PictureMarkerSymbol("Content/myImage/BluePin1LargeB.png", 32, 32).setOffset(0, 16);//聚合蓝色气泡标记
        GreenCPictureMSymbol = new PictureMarkerSymbol("Content/myImage/GreenPin1LargeB.png", 64, 64).setOffset(0, 16);//聚合绿色气泡标记
        RedCPictureMSymbol = new PictureMarkerSymbol("Content/myImage/RedPin1LargeB.png", 72, 72).setOffset(0, 16);//聚合红色气泡标记
        PinTextSymbol = new TextSymbol('', new Font("13px", Font.STYLE_NORMAL, Font.VARIANT_NORMAL, Font.WEIGHT_BOLDER), new dojo.Color([0, 0, 0])).setOffset(0, 25);//显示文字
        //overlay = new Echarts3Layer(map, echarts);
        //chartsContainer = overlay.getEchartsContainer();
        //myPipeFlowChart = overlay.initECharts(chartsContainer);
        //管网图
        var infoTemplatePoint = new InfoTemplate("元素信息", "${*}");
        geometryService = GeometryService("http://" + ArcGISServer.split('/')[2] + "/arcgis/rest/services/Utilities/Geometry/GeometryServer");//几何地图服务
        //将图例图层添加到
        layerModelBaseMap300 = new ArcGISDynamicMapServiceLayer(ArcGISServer + "ModelBaseMap300/MapServer", { id: "小于300管网图", visible: true });//小于300管网图
        map.addLayer(layerModelBaseMap300);
        tiled2 = new ArcGISTiledMapServiceLayer(ArcGISServer + "ModelBaseMap/MapServer", { id: "管网图", visible: true });//管网图层
        //tiled2 = new ArcGISDynamicMapServiceLayer(ArcGISServer + "ModelBaseMap/MapServer", { id: "管网图", visible: true });//管网图层
        map.addLayer(tiled2);
        SourceWater = new ArcGISDynamicMapServiceLayer(ArcGISServer + "SourceWater_D/MapServer", { id: "原水管网图", visible: true });//原水管网图
        //map.addLayer(SourceWater);
        Meter = new ArcGISDynamicMapServiceLayer(ArcGISServer + "Meter_D/MapServer", { id: "地表分布图", visible: true });//地表分布图
        map.addLayer(Meter);
        layerModelBaseMapMin = new ArcGISTiledMapServiceLayer(ArcGISServer + "ModelBaseMapMin/MapServer", { id: "细管网图", visible: false });//细管网图层
        map.addLayer(layerModelBaseMapMin);
        //map.addLayer(layerPressureChange);
        //layerGisPipe = new ArcGISTiledMapServiceLayer(ArcGISServer + "DetailPipeService/MapServer", { id: "管网详图", visible: false });//管网详图
        //map.addLayer(layerGisPipe);
        //计量分区搜索图层
        DBSArea2Laye = ArcGISServer + "MeasureArea_Info/MapServer/0";
        DBSArea1Laye = ArcGISServer + "MeasureArea_Info/MapServer/0";
        DBSArea0Laye = ArcGISServer + "MeasureArea_Info/MapServer/0";
        CLToolbartb = new Draw(map);
        CLToolbartb.on("draw-complete", doMeasure);
        setLayerVisibility = function (obj) {
            obj.children[0].checked = !(obj.children[0].checked);
            //用dojo.query获取class为listCss的元素数组
            var inputs = dojo.query(".listCBCss");
            var visible = [];
            //对checkbox数组进行变量把选中的id添加到visible
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].checked) {
                    visible.push(inputs[i].id);
                }
            }
            //设置可视图层
            tiled2.setVisibleLayers(visible);
        };
        maplayersClick = function () {
            if (isMapLayers) {
                recoverAll();
                isMapLayers = false;
            } else {
                recoverAll();
                $("#maplayers").css("background", "#4b77be");//改变图层按钮颜色
                var layersDisplay = document.getElementById("layersDisplay");
                layersDisplay.innerHTML = "";
                var layers = map.getLayersVisibleAtScale(map.getScale());
                //layersDisplay
                layersDisplay.style.display = "block";
                arrayUtils.forEach(layers, function (layer) {
                    if (layer.id.indexOf("graphicsLayer") <= -1) {
                        layersDisplay.innerHTML += "<div class='layers-display-line' onclick='layersChange(this, 0, false, \"\")'>" + layer.id + "</div>";
                    }
                });
                layersDisplay.innerHTML += "<div class='layers-display-close' onclick='recoverAll()'>关闭</div>";
                isMapLayers = true;
            }
        }
        //graphicslayer
        graphicslayer = new GraphicsLayer();//画图图层
        map.addLayer(graphicslayer);
        tbaGraphicslayer = new GraphicsLayer();//爆管画图图层
        map.addLayer(tbaGraphicslayer);
        //地图单击处理
        map.on("click", mapClick);
        map.on("update-start", showLoading);//add by huangxin 20180508地图加载时显示loading图标
        map.on("update-end", hideLoading);//add by huangxin 20180508地图加载完隐藏loading图标
        var identifyParams;//声明查询参数
        function showLoading() {//地图加载时显示loading图标
            $('#loadingImg').css('left', $("#map").width() / 2 - 42 + 'px');
            $('#loadingImg').css('top', $("#map").height() / 2 - 40 + 'px');
        }
        function hideLoading() {//地图加载完成后隐藏loading图标
            esri.hide(dojo.byId("loadingImg"));
            if (isFirstRun || FullExtent == null) {
                isFirstRun = false;
                homeExtent = map.extent;
                FullExtent = tiled2.fullExtent;
                //FullExtent = new esri.geometry.Extent({ "xmin": 12983527, "ymin": 4606694, "xmax": 13023121, "ymax": 4639295, "spatialReference": map.spatialReference });//地图显示的新区域;
                //xmax: 13023121.408344664
                //xmin: 12983527.027692996
                //ymax: 4639295.278690283
                //ymin: 4606694.8861267
                //FullExtent.spatialReference = map.spatialReference;
                $(".ovwButton.ovwController.ovwShow").click(function () {//鹰眼显示单击事件
                    var tmpdisplay = $(".ovwContainer").css("display");
                    if (tmpdisplay == "none")
                        $("#legendDivSoto").css("bottom", "70px");
                    else
                        $("#legendDivSoto").css("bottom", ($(".ovwContainer").height() + 3) + "px");
                });
                //updataTree();
            }
        }
        map.infoWindow.resize(245, 125);
        function mapClick(evt) {
            //实例化查询参数
            if (isMapQuery) {//判断是否选择图上查询
                $.loading(true, '查询中...');
                //清除地图上图形
                //hideAndClear();
                if (map.infoWindow.isShowing) map.infoWindow.hide();
                identifyParams = new IdentifyParameters();
                identifyParams.tolerance = 1; //设置容差
                identifyParams.geometry = evt.mapPoint;
                //identifyParams.outFields = ["*"];
                identifyParams.layerIds = [3]; //设置查找图层水库(1)消火栓(2)阀门(3)节点(4)管道(5)
                identifyParams.layerOption = IdentifyParameters.LAYER_OPTION_ALL;
                identifyParams.mapExtent = map.extent;
                identifyParams.returnGeometry = true;
                //实例化查询对象
                var identifyTask = new IdentifyTask(baseMapServerLayer);
                //地图点击查询结果处理
                identifyTask.execute(identifyParams, function (queryResult) {
                    if (queryResult.length == 0) {
                        $.loading();
                        $.modalMsg('没有元素，请重试！', 'warning');
                        return;
                    }
                    var minXY = Math.abs(queryResult[0].feature.geometry.x - identifyParams.geometry.x) + Math.abs(queryResult[0].feature.geometry.y - identifyParams.geometry.y);
                    var minIndex = 0;
                    //for (var i = 0; i < queryResult.length; i++) {
                    //    var cPointX = queryResult[i].feature.geometry.x;
                    //    var cPointY = queryResult[i].feature.geometry.y;
                    //    var tminXY = Math.abs(cPointX - identifyParams.geometry.x) + Math.abs(cPointY - identifyParams.geometry.y);
                    //    if (tminXY < minXY) {
                    //        minXY = tminXY;
                    //        minIndex = i;
                    //    }
                    //}
                    showFeature(queryResult[minIndex].feature, queryResult[minIndex].layerId, evt);
                });
            }
        }
        function doMeasure(geometry) {//量算
            geometry = geometry.geometry;
            dojo.disconnect(map.graphics, "onClick");
            //更加类型设置显示样式
            measuregeometry = geometry;
            CLToolbartb.deactivate();
            switch (geometry.type) {
                case "polyline":
                    var symbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([152, 106, 180]), 2);
                    break;
                case "polygon":
                    var symbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([152, 106, 180]), 2), new Color([152, 106, 180, 0.25]));
                    break;
            }
            //设置样式
            var graphic = new esri.Graphic(geometry, symbol);
            //清除上一次的画图内容
            map.graphics.clear();
            map.graphics.add(graphic);
            //进行投影转换，完成后调用projectComplete
            MeasureGeometry(geometry);
        }

        function MeasureGeometry(geometry) {//投影转换完成后调用方法
            if (geometry.type == "polyline") {//如果为线类型就进行lengths距离测算
                var lengthParams = new LengthsParameters();
                lengthParams.polylines = [geometry];
                lengthParams.lengthUnit = esri.tasks.GeometryService.UNIT_METER;
                lengthParams.geodesic = true;
                //lengthParams.polylines[0].spatialReference = new esri.SpatialReference(4509);
                lengthParams.polylines[0].spatialReference = map.spatialReference;
                geometryService.lengths(lengthParams);
                dojo.connect(geometryService, "onLengthsComplete", outputDistance);
            }
            else if (geometry.type == "polygon") {//如果为面类型需要先进行simplify操作在进行面积测算
                $.loading(true, '正在计算中...');
                var areasAndLengthParams = new AreasAndLengthsParameters();
                areasAndLengthParams.lengthUnit = esri.tasks.GeometryService.UNIT_METER;
                areasAndLengthParams.areaUnit = esri.tasks.GeometryService.UNIT_SQUARE_METERS;
                //this.outSR = new esri.SpatialReference({ wkid: 4509 });
                this.outSR = map.spatialReference;
                geometryService.project([geometry], this.outSR, function (geometry) {
                    geometryService.simplify(geometry, function (simplifiedGeometries) {
                        areasAndLengthParams.polygons = simplifiedGeometries;
                        //areasAndLengthParams.polygons[0].spatialReference = new esri.SpatialReference(4509);
                        areasAndLengthParams.polygons[0].spatialReference = map.spatialReference;
                        geometryService.areasAndLengths(areasAndLengthParams);
                    });
                });
                dojo.connect(geometryService, "onAreasAndLengthsComplete", outputAreaAndLength);
            }
        }
        function outputDistance(result) {//显示测量距离
            var CurX = measuregeometry.paths[0][measuregeometry.paths[0].length - 1][0];
            var CurY = measuregeometry.paths[0][measuregeometry.paths[0].length - 1][1];
            var CurPos = new esri.geometry.Point(CurX, CurY, map.spatialReference);
            map.infoWindow.setTitle("距离测量");
            map.infoWindow.setContent(" 测量长度：<strong>" + parseInt(String(result.lengths[0])) + "m</strong>");
            map.infoWindow.show(CurPos);
            map.infoWindow.resize(245, 58);
            $("#measutreLength").css("background", "");
            $("#measutreLength").css("color", "#000000");
            isCLToolbartbL = false;
        }

        function outputAreaAndLength(result) {//显示测量面积
            var caliber = [];
            var caliberNum = [];
            var CurX = (measuregeometry.cache._extent.xmax + measuregeometry.cache._extent.xmin) / 2;
            var CurY = (measuregeometry.cache._extent.ymax + measuregeometry.cache._extent.ymin) / 2
            var CurPos = new esri.geometry.Point(CurX, CurY, map.spatialReference);
            var aalContent = "";
            var identifyParams = new IdentifyParameters();
            identifyParams.tolerance = 2; //设置容差
            identifyParams.geometry = measuregeometry;
            identifyParams.layerIds = [3, 4, 5]; //设置查找图层
            identifyParams.layerOption = IdentifyParameters.LAYER_OPTION_ALL;
            identifyParams.mapExtent = map.extent;
            identifyParams.returnGeometry = true;
            //实例化查询对象
            var identifyTask = new IdentifyTask(baseMapServerLayer);
            //地图点击查询结果处理
            identifyTask.execute(identifyParams, function (queryResult) {
                var valveCount = 0;
                var nodeCount = 0;
                var nodeDem = 0;
                var pipeCount = 0;
                var pipeLen = 0;
                if (queryResult.length == 0) {
                    if (isCLToolbartbA)
                        $.loading();
                    aalContent = "<div class=\"display-div\"><div>面积：" + parseInt(String(result.areas[0])) + "㎡ </div><div>周长：" + parseInt(String(result.lengths[0])) + "m</div><div>需水量：" + nodeDem.toFixed(2) + "m³/h</div><div>阀门：" + valveCount + "个</div><div>节点：" + nodeCount + "个</div><div>管道：" + pipeCount + "条</div><div>管道长度：" + pipeLen.toFixed(2) + "m</div></div>";
                    map.infoWindow.setTitle("区域信息");
                    map.infoWindow.setContent(aalContent);
                    map.infoWindow.show(CurPos);
                    map.infoWindow.resize(195, 200);
                    $("#measutreArea").css("background", "");
                    $("#measutreArea").css("color", "#000000");
                    isCLToolbartbA = false;
                    return;
                }
                for (var i = 0; i < queryResult.length; i++) {
                    if (queryResult[i].layerId == 3) {
                        //console.log(queryResult[i])
                        var caliberJson = {
                            ElementId: '',
                            Address: '',
                            Status: '',
                            GISID: '',
                            Diameter: '',
                            attr: '',
                        }
                        caliberJson.ElementId = queryResult[i].feature.attributes.ElementId;
                        caliberJson.Address = queryResult[i].feature.attributes.Physical_Address;
                        caliberJson.Status = queryResult[i].feature.attributes.Physical_Status;
                        caliberJson.GISID = queryResult[i].feature.attributes.GISID;
                        caliberJson.Diameter = queryResult[i].feature.attributes.Physical_Diameter;
                        caliberJson.attr = queryResult[i].feature.attributes;
                        //console.log(caliberJson)
                        caliber.push(caliberJson)
                        if (caliberNum.indexOf(queryResult[i].feature.attributes.Physical_Diameter) == -1) {
                            caliberNum.push(queryResult[i].feature.attributes.Physical_Diameter)
                            //    let arr = [];
                            //    arr.push(queryResult[i].feature.attributes.ElementId);
                            //    arr.push(queryResult[i].feature.attributes.Physical_Address);
                            //    arr.push(queryResult[i].feature.attributes.Physical_Status);
                            //    arr.push(queryResult[i].feature.attributes.GISID);
                            //    arr.push(queryResult[i].feature.attributes.Physical_Diameter)
                            //    caliber.push(arr)
                        }
                        valveCount = valveCount + 1;
                        var infoTemplate2 = new esri.InfoTemplate("阀门信息",
                            "<div class=\"display-div\"><div>元素Id:${ElementId}</div>" +
                            "<div>GIS编号:${GISID}</div>" +
                            "<div>标识:${Label}</div>" +
                            "<div>埋深:${Physical_Depth}" + JDepthUnit + "</div>" +
                            "<div>口径:${Physical_Diameter}" + PDiameterUnit + "</div>" +
                            "<div>地址:${Physical_Address}</div>" +
                            "<div>供水公司:${Physical_ZoneID}</div>" +
                            "<div>营销公司:${Physical_DistrictID}</div>" +
                            //"<div>计量分区:${Physical_DMAID}</div>" +
                            "<div>状态:${Physical_Status}</div></div>"
                        );
                        if (queryResult.length > 0) {
                            map.graphics.add(queryResult[i].feature.setSymbol(BigPolygonSymbol).setInfoTemplate(infoTemplate2));
                        }
                        dojo.connect(map.graphics, "onClick", function (evt) {
                            if (evt.graphic.attributes != undefined) {
                                var tmpId = zoneClass.getValue(evt.graphic.attributes["Physical_ZoneID"]);
                                if (tmpId != null)
                                    evt.graphic.attributes["Physical_ZoneID"] = tmpId;
                                var tmpId = DMAClass.getValue(evt.graphic.attributes["Physical_DMAID"])
                                if (tmpId != null)
                                    evt.graphic.attributes["Physical_DMAID"] = tmpId;
                                var tmpId = districtClass.getValue(evt.graphic.attributes["Physical_DistrictID"]);
                                if (tmpId != null)
                                    evt.graphic.attributes["Physical_DistrictID"] = tmpId;
                                var tmpId = evt.graphic.attributes["Physical_Status"];
                                if (tmpId != null && tmpId != "开启" && tmpId != "关闭")
                                    evt.graphic.attributes["Physical_Status"] = tmpId == "0" ? "开启" : tmpId == "1" ? "开启" : "关闭";
                                map.infoWindow.resize(260, 275);
                            }
                        });
                    } else if (queryResult[i].layerId == 4) {
                        nodeCount = nodeCount + 1;
                        nodeDem += Number(queryResult[i].feature.attributes.Physical_BaseDemand);
                    } else {
                        pipeCount = pipeCount + 1;
                        pipeLen += Number(queryResult[i].feature.attributes.Physical_Length);
                    }

                    if (i == queryResult.length - 1) {
                        let koujingClass = [];
                        let kongjingStr = '';

                        //console.log(caliberNum)
                        for (let i = 0; i < caliberNum.length; i++) {

                            let arr = [];
                            arr = caliber.filter(item => item.Diameter == caliberNum[i])
                            //console.log(arr)
                            koujingClass.push(arr.length)
                            //console.log(koujingClass)
                            kongjingStr += "<div><input type='checkbox' id='" + caliberNum[i] + "' onclick='kongjinClick(this)'></input><input  id='check" + caliberNum[i] + "' style='display:none' value='" + JSON.stringify(arr) + "'></input>" + caliberNum[i] + "mm:" + koujingClass[i] + "个</div>"
                        }

                        //aalContent = "<div class=\"display-div\"><div>面积：" + parseInt(String(result.areas[0])) + "㎡ </div><div>周长：" + parseInt(String(result.lengths[0])) + "m</div><div>基本需水量：" + nodeDem.toFixed(2) + "m³/h</div><div>阀门：" + valveCount + "个</div><div>节点：" + nodeCount + "个</div><div>管道：" + pipeCount + "条</div><div>管道长度：" + pipeLen.toFixed(2) + "m</div></div>";
                        aalContent = "<div class=\"display-div\">" + kongjingStr + "<div>阀门：" + valveCount + "个</div><div>节点：" + nodeCount + "个</div><div>管道：" + pipeCount + "条</div><div>管道长度：" + pipeLen.toFixed(2) + "m</div></div>";
                    }
                }
                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询
                var queryTask = new QueryTask(pipeMapLayer);
                //创建查询参数对象
                var query = new Query();
                query.where = "OBJECTID=1";
                //服务器给我们返回的字段信息，*代表返回所有字段
                query.outFields = ["OBJECTID"];
                //空间参考信息
                query.outSpatialReference = map.spatialReference;
                //查询的标准，此处代表和geometry相交的图形都要返回
                query.spatialRelationship = dojoQuery.SPATIAL_REL_INTERSECTS;
                //是否返回几何信息
                query.returnGeometry = false;
                //执行空间查询
                queryTask.execute(query, function (qResult) {
                    map.infoWindow.setTitle("区域信息");
                    map.infoWindow.setContent(aalContent);
                    map.infoWindow.show(CurPos);
                    map.infoWindow.resize(195, 200);
                    //$("#measutreArea").css("background", "");
                    //$("#measutreArea").css("color", "#000000");
                    if (isCLToolbartbA)
                        $.loading();
                    isCLToolbartbA = false;
                });
                $("#areaBut").removeClass('active');
            });
            //alert("面积：" + dojo.number.format(result.areas[0]) + "平方米" + " 长度：" + dojo.number.format(result.lengths[0]) + "米");
        }
    });
    function clearFm() {
        all.checked = false
        let valveList = document.getElementById("valveList");
        valveList.innerHTML = ''
        $('#valveListCheck').html('');
        index = 1
    };
    function kongjinClick(node) {  //划定区域点击某一管径的选择事件
        let valveList = document.getElementById("valveList");
        if (node.checked) {
            let arr = JSON.parse(document.getElementById("check" + node.id).value)

            for (let i = 0; i < arr.length; i++) {
                //console.log(arr[i])
                let val2 = (arr[i].Status == 0 ? "开启" : arr[i].Status == 1 ? "开启" : "关闭");
                valveList.innerHTML += "<tr class='right221' id='td" + node.id + "'>" + "<td class='right2211' >" + "<input type='checkbox' class='checkedtag' id='" + arr[i].ElementId + "' name='upCheck' />" + "</td >" + "<td class='right2211' ondblclick='drawPointsToMap(this,\"" + arr[i].attr.ElementId + "\")'>"
                    + (index) +
                    "</td ><td class='right2212'ondblclick='drawPointsToMap(this,\"" + arr[i].attr.ElementId + "\")'>"
                    + arr[i].Address +
                    "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + arr[i].attr.ElementId + "\")'>"
                    + val2 +
                    "</td><td class='right2212'ondblclick='drawPointsToMap(this,\"" + arr[i].attr.ElementId + "\")'>"
                    + Number(arr[i].Diameter).toFixed(0) +
                    "</td></tr>"
                index += 1;
            }
        } else {
            let tdArr = document.querySelectorAll('#td' + node.id)
            for (let j = 0; j < tdArr.length; j++) {
                tdArr[j].parentElement.removeChild(tdArr[j])
                index -= 1
            }
        }
    }
    let valveListCheck = document.getElementById("valveListCheck");
    function modelCompute() { //模型计算
        all.checked = false
        $.loading(true, '模型计算中...');
        let tagArr = document.querySelectorAll(".checkedtag")//获取阀门表格的所有数据
        let checkeTabe = [];//选中的列数组
        let downChecck = []
        let arrDown = []
        let statusArr=[]
        for (let j = 0; j < tagArr.length; j++) {
            if (tagArr[j].checked) {
                let arr = tagArr[j].parentElement.parentElement.children
                arrDown.push({
                    id: arr[0].childNodes[0].id,
                    Address: arr[2].innerHTML,
                    Status: arr[3].innerHTML,
                    Diameter: arr[4].innerHTML,
                })
                console.log(arr[3].innerHTML.substring(0, 2))
                if (arr[3].innerHTML.substring(0, 2) == "开启") {
                    statusArr.push(1)
                } else {
                    statusArr.push(0)
                }
            }
        }
        for (let i = 0; i < tagArr.length; i++) {
            if (tagArr[i].checked) {
                checkeTabe.push(tagArr[i].id)
                tagArr[i].checked = false
            }
        }
        let tagStr = checkeTabe.toString()
        let statusStr = statusArr.toString()
        //if (valveListCheck.children) {//判断
        //    for (let i = 0; i < valveListCheck.children.length; i++) {
        //        if (valveListCheck.children[i].children[0] && downChecck.indexOf(valveListCheck.children[i].children[0].id.slice(2)) == -1) {
        //            downChecck.push(valveListCheck.children[i].children[0].id.slice(2))
        //        }
        //    }
        //}

        valveListCheck.innerHTML = ''
        $.ajax({
            type: "GET",
            url: "/Elaborate/ValueCheck/ValveCheckCal?valve_ids=" + tagStr + "&valve_status=" + statusStr,
            //dataType: "json",
            success: function (adata) {
                adata = adata.split(',');
                for (let i = 0; i < adata.length; i++) {
                    if (adata[i] == 1) {
                        valveListCheck.innerHTML += "<tr class='right221' id='tr" + arrDown[i].id + "' >" + "<td class='right2211' >" + "<input type='checkbox'checked='checked'class='downchecked' id='check_" + arrDown[i].id + "' />" + "</td >" + "<td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>"
                            + arrDown[i].Address +
                            "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>"
                            + arrDown[i].Diameter +
                            "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>"
                            + arrDown[i].Status +
                            "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>状态异常" +
                            "</td></tr>"
                    } else {
                        valveListCheck.innerHTML += "<tr class='right221' id='tr" + arrDown[i].id + "' >" + "<td class='right2211' >" + "<input type='checkbox'checked='checked'class='downchecked' id='check_" + arrDown[i].id + "' />" + "</td >" + "<td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>"
                            + arrDown[i].Address +
                            "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>"
                            + arrDown[i].Diameter +
                            "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>"
                            + arrDown[i].Status +
                            "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + arrDown[i].id + "\")'>状态正常" +
                            "</td></tr>"
                    }

                }
                $.loading();
                $.modalMsg("模型计算成功！", "success");
            },
            error: function (error) {
                $.loading();
                $.modalMsg("模型计算失败！", "warning");
            }
        })
    }
    //下发排查任务指令
    function issueInstruction() {
        $.loading(true, '下发排查任务指令中...');
        let tagArr = document.querySelectorAll(".downchecked")//待排查列表所有checkbox数组
        let checkeTabe = [];//选中的列数组
        for (let i = 0; i < tagArr.length; i++) {
            if (tagArr[i].checked) {
                checkeTabe.push(tagArr[i].id.slice(6))
                tagArr[i].checked = false
            }
        }
        let tagStr = checkeTabe.toString()
        $.ajax({
            type: "GET",
            url: "/Elaborate/ValueCheck/CreateValveOrder?ids=" + tagStr,
            dataType: "json",
            success: function (adata) {
                $.loading();
                $.modalMsg("下发成功！", "success");
            }
        })
    }
    function mapQueryClick(th) {//选择阀门按钮单击事件
        ORGANIZEID.css("display", "none")
        $(".xiaoId").removeClass('active');
        flage = false
        $("#companyDatas").css("display", "none")
        if (isMapQuery) {
            if (map.infoWindow.isShowing) map.infoWindow.hide();
            //画图图层
            graphicslayer.clear();
            th.classList.remove('active');
            isMapQuery = false;//是否图上查询标识
            $('#map').mousemove(function (e) {
                $('#followMouseInfo').hide();
            });
        }
        else {
            //recoverAll();
            //$("#fixed_list>li").eq("6").attr("id", "check_fixed");
            $("#areaBut").removeClass('active');
            CLToolbartb.deactivate();//取消绘画
            isCLToolbartbA = false;
            map.graphics.clear();
            th.classList.add('active');
            isMapQuery = true;//是否图上查询标识
            //setValueForDiv("followMouseInfo", "单击地图选择阀门")
            $('#map').mousemove(function (e) {
                $('#followMouseInfo').show().css({
                    "top": e.pageY + 5,
                    "left": e.pageX + 15
                });
            });
            $('#map').mouseleave(function () {
                $('#followMouseInfo').hide();
            });
        }
    }
    function measutreArea(th) {
        ORGANIZEID.css("display", "none")
        $(".xiaoId").removeClass('active');
        $("#companyDatas").css("display", "none")
        flage = false
        if (!isCLToolbartbA) {
            graphicslayer.clear();
            map.graphics.clear();
            isCLToolbartbA = true;
            CLToolbartb.activate(esri.toolbars.Draw.POLYGON);
            th.classList.add('active');
            $("#valveBut").removeClass('active');
            isMapQuery = false;//是否图上查询标识
            $('#map').mousemove(function (e) {
                $('#followMouseInfo').hide();
            });
        } else {
            //画图图层
            graphicslayer.clear();
            map.graphics.clear();
            th.classList.remove('active');
            CLToolbartb.deactivate();//取消绘画
            isCLToolbartbA = false;
        }
        if (map.infoWindow.isShowing) map.infoWindow.hide();
    }
    function showFeature(feature, layerId, evt) {//信息显示
        var attr = feature.attributes;
        var title = attr.Label;
        var content = "";
        $.ajax({
            url: '/Elaborate/ValueCheck/MapQuery',
            type: 'post',
            data: {
                ElementId: attr.ElementId,
                layerId: layerId
            },
            success: function (data, response, status) {

                if (data.length > 0) {
                    var result = JSON.parse(data);
                    let val2;
                    switch (layerId) {
                        case 3://阀门
                            content = "<table class=\"display-table\" style=\"width: 100%;\"><tr><td style=\"width: 50%;text-align:right;\">元素Id : </td><td>" + attr.ElementId + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">GIS编号 : </td><td>" + attr.GISID + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">元素类型 : </td><td>阀门</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">口径(" + PDiameterUnit + ") : </td><td>" + Number(attr.Physical_Diameter).toFixed(0) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">埋深(" + JDepthUnit + ") : </td><td>" + Number(attr.Physical_Depth).toFixed(2) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">高程(" + JElevationUnit + ") : </td><td>" + Number(attr.Physical_Elevation).toFixed(2) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">地址 : </td><td>" + attr.Physical_Address + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">供水公司 : </td><td>" + zoneClass.getValue(attr.Physical_ZoneID) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">营销公司 : </td><td>" + districtClass.getValue(attr.Physical_DistrictID) + "</td></tr>"
                                //+ "<tr><td style=\"width: 50%;text-align:right;\">计量分区 : </td><td>" + DMAClass.getValue(attr.Physical_DMAID) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">状态 : </td><td>" + (attr.Physical_Status == 0 ? "开启" : attr.Physical_Status == 1 ? "开启" : "关闭") + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">上游水头(" + PressUnit + ") : </td><td>" + Number(result.Result_FromHead).toFixed(PressPlace) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">上游压力(" + PressUnit + ") : </td><td>" + Number(result.Result_FromPressure).toFixed(PressPlace) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">下游水头(" + PressUnit + ") : </td><td>" + Number(result.Result_ToHead).toFixed(PressPlace) + "</td></tr>"
                                + "<tr><td style=\"width: 50%;text-align:right;\">下游压力(" + PressUnit + ") : </td><td>" + Number(result.Result_ToPressure).toFixed(PressPlace) + "</td></tr>"
                                + "<tr><td >"
                                + "</td > <td><div class=\"Z-left-system-operate\" style=\"width: 60px;\" onclick=\"vsDg_add(" + attr.ElementId + "," + attr.Physical_Status + ")\">添加</div>"
                                + "</td></tr></table>";
                            val2 = (attr.Physical_Status == 0 ? "开启" : attr.Physical_Status == 1 ? "开启" : "关闭");
                            //vList = "<tr class='right221'>" + "<td class='right2211' >" + "<input type='checkbox' class='checkedtag' id='" + attr.ElementId + "'onclick='valveClick(this,\"" + attr.Physical_Address + "," + val2 + "," + Number(attr.Physical_Diameter).toFixed(0) + "," + index + "\")'  />" + "</td >" + "<td class='right2211' >"
                            vList = "<tr class='right221'   >" + "<td class='right2211' >" + "<input type='checkbox' class='checkedtag' id='" + attr.ElementId + "' name='upCheck'/>" + "</td >" + "<td class='right2211' ondblclick='drawPointsToMap(this,\"" + attr.ElementId + "\")'>"
                                + (index) +
                                "</td ><td class='right2212'ondblclick='drawPointsToMap(this,\"" + attr.ElementId + "\")'>"
                                + attr.Physical_Address +
                                "</td><td class='right2212'ondblclick='drawPointsToMap(this,\"" + attr.ElementId + "\")'>"
                                + val2 +
                                "</td><td class='right2212'ondblclick='drawPointsToMap(this,\"" + attr.ElementId + "\")'>"
                                + Number(attr.Physical_Diameter).toFixed(0) +
                                "</td></tr>"
                            break;
                    }
                }
            },
            complete: function () {
                map.infoWindow.setTitle(title);
                map.infoWindow.setContent(content);
                (evt) ? map.infoWindow.show(evt.screenPoint, map.getInfoWindowAnchor(evt.screenPoint)) : null;
                map.infoWindow.resize(260, 370);
                var graphic = new esri.Graphic(feature.geometry, BigPolygonSymbol);
                graphicslayer.add(graphic);
                $.loading();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $.modalMsg('无数据或数据解析错误！', 'warning');
                //TODO
            }
        });
    }

    function drawPointsToMap(node, val) {
        let arr = val.split(",")
        var title = "阀门信息";
        var picAddr = "timg_blue";
        var colors = color1;
        var unit = PressUnit;
        var query = new esri.tasks.Query();
        var queryTask = new esri.tasks.QueryTask(valveMapLayer);
        query.where = "ElementId = " + arr[0];
        query.outSpatialReference = map.spatialReference;
        query.returnGeometry = true;
        query.outFields = ["*"];
        queryTask.execute(query, function (featureSet) {
            if (featureSet.features.length == 0) {
                $.modalMsg("未找到该元素！", "warning");
                $.messager.progress('close');
                return;
            }

            var centerPoint = featureSet.features[0].geometry;
            var text = featureSet.features[0].attributes;

            //开始画，画成能够在页面上显示数字的形式。
            var point = new esri.geometry.Point(centerPoint.x, centerPoint.y, map.spatialReference);
            // 定义自变量
            let smsLength = ((arr[0] + '阀门').length * 14) + 5;//背景图片宽
            let smsLevel = smsLength * 50 / 180;    //图片水平偏移
            let textLevel = smsLength * 49 / 180;       //文字水平偏移
            var textSymbol1 = new esri.symbol.TextSymbol((arr[0] + '阀门'), font1, colors).setOffset(textLevel, 15.5556);
            // var textSymbol2 = new esri.symbol.TextSymbol(value.toString(), font1, colors).setOffset(47, 20);
            let val2 = (text.Physical_Status == 0 ? "开启" : text.Physical_Status == 0 ? "开启" : "关闭")
            var sms = new esri.symbol.PictureMarkerSymbol("/Areas/DataDisplay/Content/img/" + picAddr + ".png", smsLength, 32).setOffset(smsLevel, 15);
            var infoTemplate = new esri.InfoTemplate();
            infoTemplate.setTitle("<div>" + title + "</div>");
            infoTemplate.setContent("<div>元素Id:" + text.ElementId + "</div>" +
                "<div>GIS编号:" + text.GISID + "</div>" +
                //"<div>标识:${Label}</div>" +
                "<div>埋深:" + text.Physical_Depth + "" + JDepthUnit + "</div>" +
                "<div>口径:" + text.Physical_Diameter + "" + PDiameterUnit + "</div>" +
                "<div>地址:" + text.Physical_Address + "</div>" +
                "<div>供水公司:" + zoneClass.getValue(text.Physical_ZoneID) + "</div>" +
                "<div>营销公司:" + districtClass.getValue(text.Physical_DistrictID) + "</div>" +
                //"<div>计量分区:${Physical_DMAID}</div>" +
                "<div>状态:" + val2 + "</div>");
            map.infoWindow.resize(240, 190);
            var graphic = new esri.Graphic(point, SmallQualitySymbol);
            var graphic1 = new esri.Graphic(point, textSymbol1);
            // var graphic2 = new esri.Graphic(point, textSymbol2);
            var graphic3 = new esri.Graphic(point, sms);
            graphicslayer.add(graphic3.setInfoTemplate(infoTemplate));
            graphicslayer.add(graphic1.setInfoTemplate(infoTemplate));
            graphicslayer.add(graphic);
            // graphicslayer.add(graphic2.setInfoTemplate(infoTemplate));
            map.centerAndZoom(point, 7);
            //$.messager.progress('close');
        });

    }
    function markeCompany(node) {//营销公司按钮
        if (!flage) {
            ORGANIZEID.css("display", "block")
            //$("#companyDatas").css("display", "block")
            node.classList.add('active');
            $("#areaBut").removeClass('active');
            $("#valveBut").removeClass('active');
            CLToolbartb.deactivate();//取消绘画
            graphicslayer.clear();
            map.graphics.clear();
            isCLToolbartbA = false;
            isMapQuery = false;//是否图上查询标识
            $('#map').mousemove(function (e) {
                $('#followMouseInfo').hide();
            });
            if (map.infoWindow.isShowing) map.infoWindow.hide();
            flage = true
        } else {
            ORGANIZEID.css("display", "none")
            $("#companyDatas").css("display", "none")
            $(".xiaoId").removeClass('active');
            flage = false
        }


    }
    let arrCompany = [] //存各营销的数据
    function getCompanyData() {//获取营销公司数据
        let companyTable = $("#companyTable")
        $.loading(true);
        $.ajax({
            type: "GET",
            url: "/Elaborate/ValueCheck/GetAreaList",
            dataType: "json",
            success: function (adata) {
                arrCompany.push(adata[1])
                for (let i = 0; i < adata[0].length; i++) {
                    companyTable[0].innerHTML += "<tr class='right221' onclick='companySelected(\"" + i + "\")'><td>" + adata[0][i] + "</td></tr>"
                }
                $.loading();
                
            },

        })
    }
    function companySelected(val1) {//选中某一营销公司
        $("#companyDatas")[0].innerHTML = '';
        let arr = arrCompany[0][val1];
        console.log(arr);
        let companyStr = '';
        $("#companyDatas").css("display", "block")
        for (let i = 0; i < arr[0].length; i++) {
            companyStr += "<div><input type='checkbox'  onclick='companyGJ(this,\"" + arr[1].Physical_DistrictID + "\")' id='" + arr[0][i].Jc + "'></input>" + arr[0][i].Jc + "mm:" + arr[0][i].Tc + "个</div>"
        }
        $("#companyDatas")[0].innerHTML = "<div class=\"display-div\"><div> 营销公司信息:" + arr[1].District + "</div>" + companyStr + "<div>阀门：" + arr[1].Tc + "个</div><div>节点：" + arr[1].Jc + "个</div><div>管道：" + arr[1].Pc + "条</div><div>管道长度：" + arr[1].Length.toFixed(2) + "m</div></div>";
    }
    function companyGJ(node, val) {//选中的营销公司勾选某一管径批量到带核准的阀门
        if (node.checked) {
            console.log(node.id, val)
            $.loading("批量选择中");
            $.ajax({
                type: "GET",
                url: "/Elaborate/ValueCheck/GetAreaByIdList?areaId=" + val + "&diam=" + node.id,
                dataType: "json",
                success: function (adata) {
                    console.log(adata)
                    for (let i = 0; i < adata[0].length; i++) {
                        let val2 = (adata[0][i].Physical_Status == 0 ? "开启" : adata[0][i].Physical_Status == 1 ? "开启" : "关闭");
                        $("#valveList")[0].innerHTML += "<tr class='right221' id='tdd" + adata[0][i].ElementId + "'>" + "<td class='right2211' >" + "<input type='checkbox' class='checkedtag' id='" + adata[0][i].ElementId + "' name='upCheck'/>" + "</td >" + "<td class='right2211' ondblclick='drawPointsToMap(this,\"" + adata[0][i].ElementId + "\")'>"
                            + (index) +
                            "</td ><td class='right2212'ondblclick='drawPointsToMap(this,\"" + adata[0][i].ElementId + "\")'>"
                            + adata[0][i].Physical_Address +
                            "</td><td class='right2212' ondblclick='drawPointsToMap(this,\"" + adata[0][i].ElementId + "\")'>"
                            + val2 +
                            "</td><td class='right2212'ondblclick='drawPointsToMap(this,\"" + adata[0][i].ElementId + "\")'>"
                            + Number(adata[0][i].Physical_Diameter).toFixed(0) +
                            "</td></tr>"
                        index += 1;
                    }
                    $.loading();
                    $.modalMsg("批量选择成功！", "success");
                },

            })
        }
    }
    //设置页面div显示内容
    function setValueForDiv(id, content) {
        var element = document.getElementById(id);
        try {
            //element.innerHTML = unescape(content);
            element.innerHTML = decodeURI(content);
        } catch (e) {
            return;
        }

        if (!element.innerHTML) {
            try {
                element.innerHTML = decodeURI(content);
            } catch (e) { }
        }
        //content = "";
    }
    function vsDg_add(id, content) {
        var element = document.getElementById("valveList");
        try {
            //element.innerHTML = unescape(content);
            if (vList.length > 0) {
                element.innerHTML = element.innerHTML + decodeURI(vList);
                index += 1;
            }
        } catch (e) {
            return;
            vList = "";
        }
        vList = "";
    }
    window.onresize = function () {
        var mainH = $(window).height() - 10;
        var mainW = $(window).width();
        $(".main-container").height(mainH);
        $(".main-container").width(mainW);
        $("#map").height(mainH - 20);
        $("#map").width(mainW - 440);
    }
    window.onload = function () {
        getCompanyData()
        var mainH = $(window).height() - 10;
        var mainW = $(window).width();
        $(".main-container").height(mainH);
        $(".main-container").width(mainW);
        $("#map").height(mainH - 20);
        $("#map").width(mainW - 440);
        let gradeNum = 3;
        $.ajax({
            url: '/Elaborate/ValueCheck/GetDMAList',
            type: 'post',
            success: function (data, response, status) {
                if (data.length > 0) {
                    for (var i = 0; i < data[0].length; i++) {
                        var tmp1 = data[0][i];
                        zoneClass.add(tmp1[0], tmp1[1]);
                    }
                    var dist = data[1]; //营销公司
                    if (gradeNum > 2) var dma = data[2];
                    if (gradeNum > 3) var dmaa = data[3];
                    for (var i = 0; i < dist.length; i++) {
                        var tmp1 = dist[i];
                        districtClass.add(tmp1[0], tmp1[1]);
                        if (gradeNum > 2) {
                            for (var j = 0; j < dma.length; j++) {
                                var tmp2 = dma[j];
                                DMAClass.add(tmp2[0], tmp2[1]);
                                if (tmp1[0] == tmp2[2]) {
                                    if (gradeNum > 3) {
                                        for (var x = 0; x < dmaa.length; x++) {
                                            var tmp3 = dmaa[x];
                                            DMAAreaClass.add(tmp3[0], tmp3[1]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    //$.messager.alert('提示', '无数据！', 'warning');
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $.modalMsg('无数据或数据解析错误！', 'warning');
                //TODO
            }
        });
    }



    // 给全选按钮绑定点击事件
    all.onclick = function () {
        //console.log(all.checked);
        for (var i = 0; i < sports.length; i++) {
            sports[i].checked = all.checked;
        }
    }
    //给每个小复选框绑定点击事件
    $("[name=upCheck]").each(function (item) {
        // 控制全选按钮是否选中
        var flag = true;
        $("[name=upCheck]")[item].click(function () {
            // 每次点击一个小框，都检查是否所有复选框都被选中
            for (var i = 0; i < sports.length; i++) {
                if (!sports[i].checked) {
                    flag = false;
                    break; // 只要有一个小复选框没有被选中，全选按钮就没被选中，可跳出循环，下面小复选框不用再判断
                }
            }
        })

        all.checked = flag;
    });
     //let valveListCheck = document.getElementById("valveListCheck");
    //function valveClick(node, val1) {
    //    let arr = [];
    //    arr = val1.split(',')
    //    if (node.checked) {
    //        valveListCheck.innerHTML += "<tr class='right221'>" + "<td class='right2211' >" + "<input type='checkbox'checked='checked' id='check_" + node.id + "'onclick='valveClick2(this)' />" + "</td >" + "<td class='right2211' >"
    //            + arr[3] +
    //            "</td ><td class='right2212'>"
    //            + arr[0] +
    //            "</td><td class='right2212'>"
    //            + arr[1] +
    //            "</td><td class='right2212'>"
    //            + arr[2] +
    //            "</td></tr>"
    //    } else {
    //        let Removetarget = document.getElementById('check_' + node.id);
    //        Removetarget.parentElement.parentElement.parentElement.removeChild(Removetarget.parentElement.parentElement);
    //        document.getElementById(node.id).checked = false
    //    }
    //}
    //function valveClick2(node) {
    //    let Removetarget = document.getElementById(node.id);
    //    Removetarget.parentElement.parentElement.parentElement.removeChild(Removetarget.parentElement.parentElement);
    //    document.getElementById(node.id.slice(6)).checked = false

    //}
</script>
